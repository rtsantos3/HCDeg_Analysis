subset(pth_2_ko, pth_2_ko$V1 %in% deg_kos_list)
pth_2_ko <- subset(pth_2_ko, pth_2_ko$V1 %in% deg_kos_list)
pth_2_ko %>% filter(V1 %in% deg_kos_list)
deg_kos_list <- c(deg_kos$KO)
list
deg_kos_list <- list(deg_kos$KO)
deg_kos_list <- list(deg_kos)
deg_kos_list <- c(deg_kos)
View(deg_kos_list)
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko[,'V1'] %in% deg_kos$KO)]
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko[,'V1'] %in% deg_kos$KO) == TRUE]
View(pth_2_ko_filt)
View(pth_2_ko_filt)
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko['V1'] %in% deg_kos$KO) == TRUE]
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko['V1'] %in% deg_kos$KO) == TRUE]
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko['V1',] %in% deg_kos$KO) == TRUE]
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko['V1',] %in% deg_kos$KO) == TRUE]
deg_kos_list <- list(deg_kos$KO)
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko['V1',] %in% deg_kos_list) == TRUE]
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko['V1'] %in% deg_kos_list) == TRUE]
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko[,1] %in% deg_kos_list) == TRUE]
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko[,1] %in% deg_kos_list) == TRUE]
pth_2_ko_filt <- pth_2_ko[, which(pth_2_ko[1,] %in% deg_kos_list) == TRUE]
print(i)
for (i in range(1:length(pth_2_ko))){
print(i)
}
for (i in range(1:length(pth_2_ko))){
print(i)
}
for (i in range(1,length(pth_2_ko))){
print(i)
}
print(row)
for (row in pth_2_ko){
print(row)
}
print(row[,1])
for (row in pth_2_ko){
if row[,1] %in% deg_kos_list{
for (row in pth_2_ko){
if (row[,1] %in% deg_kos_list){
print(row[,1])
}
}
print(row)
for (row in pth_2_ko){
if (row[,1] %in% deg_kos_list){
print(row)
}
}
for (row in pth_2_ko){
if (row[,1] %in% deg_kos_list){
print(row)
}
}
deg_filtered <- filter(pth_2_ko, V1 %in% deg_kos$KO)
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
deg_filtered <- filter(pth_2_ko, V1 %in% deg_kos$KO)
deg_filtered <- filter(pth_2_ko, v1 %in% deg_kos$KO)
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
names(pth_2_ko)
deg_filtered <- filter(pth_2_ko, "V1" %in% deg_kos$KO)
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
deg_filtered <- filter(pth_2_ko, "V1" %in% deg_kos$KO)
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
deg_filtered <- filter(pth_2_ko, "V1" %in% deg_kos$KO)
pth_2_ko_filt <- filter(pth_2_ko, "V1" %in% deg_kos$KO)
deg_filtered
pth_2_ko_filt <- filter(pth_2_ko, "V1" %in% deg_kos_list)
View(taxa_blast)
pth_2_ko_filt <- filter(pth_2_ko, pth_2_ko$V1 %in% deg_kos$KO)
pth_2_ko_filt <- filter(pth_2_ko, pth_2_ko$V1 %in% deg_kos$KO)
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
pth_2_ko_filt <- pth_2_ko[pth_2_ko$V1 %in% deg_kos$KO,]
pth_2_ko <- pth_2_ko[pth_2_ko$V1 %in% deg_kos$KO,]
View(pth_2_ko_filt)
for(row in 1:nrow(pth_2_ko)){
print(row)
}
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[,2])
print(ko_list)
}
View(ko_list)
View(pth_2_ko_filt)
View(pth_2_ko)
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[i,2])
print(ko_list)
}
ko_list <- list(pth_2_ko[i,1])
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[i,1])
print(ko_list)
}
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[1,1])
print(ko_list)
}
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[1,1])
print(ko_list)
}
View(ko_list)
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[i,1])
}
View(ko_list)
ko_list <- list(pth_2_ko[1,i])
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[1,i])
}
View(ko_list)
View(ko_list)
ko_list[[1]]
View(pth_2_ko)
View(pth_2_ko_filt)
View(pth_2_ko)
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[1,i])
}
#Filter to only Select KOs
pth_2_ko <- pth_2_ko[pth_2_ko$V1 %in% deg_kos$KO,]
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[1,i])
}
remove(deg_filtered)
for(i in 1:nrow(pth_2_ko)){
ko_list <- list(pth_2_ko[1,i])
}
deg_kos$Enzyme_list <- pth_2_ko[,2]
View(deg_kos)
deg_kos$Enzyme_list <- pth_2_ko[2,]
deg_kos$Enzyme_list <- pth_2_ko[,2:]
deg_kos$Enzyme_list <- list(pth_2_ko[,2])
View(deg_kos)
pth_2_ko[,2]
deg_kos$Enzyme_list <- c(pth_2_ko[,2])
View(deg_kos)
#Filter to only Select KOs
pth_2_ko <- pth_2_ko[pth_2_ko$V1 %in% deg_kos$KO,]
deg_kos$Enzyme_list <- list(pth_2_ko[,2])
View(deg_kos)
deg_kos['ko00361']
deg_kos[, 'ko00361']
deg_kos[, 'ko00361']
rownames(pth_2_ko) <- pth_2_ko[,1]
View(pth_2_ko)
pth_2_ko[,1] <- NULL
#Open selected KOs (for plotting relevant Kegg pathways)
deg_kos <- read.csv('./select_kos.txt', sep = '\t', header = TRUE)
rownames(deg_kos) <- deg_kos[,1]
deg_kos[,1] <- NULL
pth_2_ko <- pth_2_ko[pth_2_ko$V1 %in% rownames(deg_kos),]
pth_2_ko <- pth_2_ko[pth_2_ko$V1 %in% rownames(deg_kos),]
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
pth_2_ko <- pth_2_ko[pth_2_ko$V1 %in% rownames(deg_kos),]
View(taxa_vsearch)
View(taxa_blast)
View(deg_kos)
View(pth_2_ko)
pth_2_ko_concat <-data.frame('enzyme_list'=unlist(pth_2_ko))
View(pth_2_ko_concat)
View(pth_2_ko_filt)
View(pth_2_ko_concat)
remove(pth_2_ko_concat)
pth_2_ko %>%
unite(pth_2_ko[,] sep = "", remove = FALSE)
pth_2_ko %>%
unite(pth_2_ko[,], sep = "", remove = FALSE)
ko_strat <- read.csv('../picrust2-strat/out/KO_metagenome_out/strat_ko_metagenome.tsv', sep = '\t')
View(ko_strat)
View(sample_metadata)
View(taxa_blast)
View(vals)
View(unstrat_kegg)
View(vals)
View(unstrat_kegg)
nsti_asvs <- read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='/t')
nsti_asvs <- read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='\t')
View(nsti_asvs)
View(nsti_asvs)
View(rel_count_otu)
rel_count_x_nsti <- merge(rel_count_otu, nsti_asvs, by=c(row.names,'sequence'))
mode(nsti_asvs)
nsti_asvs <- as.data.frame(read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='\t'))
rel_count_otu <- as.data.frame(apply(abs_count_otu,2,function(x){x/sum(x)}))
rel_count_x_nsti <- merge(rel_count_otu, nsti_asvs, by=c(row.names,'sequence'))
View(nsti_asvs)
nsti_asvs <- as.data.frame(read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='\t', row.names = 1))
View(nsti_asvs)
rel_nsti <- merge(nsti,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
View(abs_count_otu)
View(rel_nsti)
#This code block is to load the required files to plot NSTI vs relative abundance
abs_count_otu <-  read_qza(file = '../dada2/table.qza')$data
rel_count_otu <- as.data.frame(apply(abs_count_otu,2,function(x){x/sum(x)}))
nsti_asvs <- as.data.frame(read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='\t', row.names = 1))
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
#Group accding to consortia
plot(x, y,
pch = 19,
col = factor(sample_metadata$Sample.id))
library(reshape2)
rel_nsti <- melt(rel_nsti, id.vars = sample_metadata$Sample.id, variable.name = 'sample')
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
View(rel_nsti)
View(sample_metadata)
nsti_asvs <- melt(d[,c(row.names(nsti_asvs), sample_metadata$Sample.id)], id.vars=row.names(nsti_asvs))
rel_nsti <- melt(nsti_asvs[,c(row.names(nsti_asvs), sample_metadata$Sample.id)], id.vars=row.names(nsti_asvs))
rel_nsti$id <- rownames(rel_nsti)
View(sample_metadata)
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names)
View(rel_nsti)
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
View(rel_nsti)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id=c(sample_metadata$Sample.id))
View(rel_nsti)
View(sample_metadata)
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
View(sample_metadata)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id=c("HC-DS", "HC-XY", "HC-HX", "HC-HD"))
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id=c("HC-DS", "HC-XY", "HC-HX", "HC-HD"))
View(sample_metadata)
View(rel_nsti)
View(rel_nsti)
rel_count_otu <- as.data.frame(apply(abs_count_otu,2,function(x){x/sum(x)}))
nsti_asvs <- as.data.frame(read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='\t', row.names = 1))
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id=c("HC-DS", "HC-XY", "HC-HX", "HC-HD"))
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id=c(sample_metadata$Sample.id))
#Group accding to consortia
xx
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id=c(sample_metadata$Sample.id))
View(rel_nsti)
sample_ids <- c(sample_metadata$Sample.id)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id=c(sample_ids))
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id=c(sample_ids))
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id.vars=c(sample_ids))
View(rel_nsti)
sample_ids <- c("HC-HD", "HC-HX", "HC-DS")
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id.vars=c(sample_ids))
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all=TRUE)
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id.vars=c(sample_ids))
sample_ids <- c("HC-HD", "HC-HX", "HC-DS", "HC-XY")
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id.vars=c(sample_ids))
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id.vars=c(sample_ids))
View(rel_nsti)
sample_ids <- c(sample_metadata$Sample.id)
mode(sample_ids)
View(nsti_asvs)
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
View(rel_nsti)
sample_ids <- c(3:6)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id.vars=c(sample_ids))
View(rel_nsti)
sample_ids <- c(sample_metadata$Sample.id)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
View(rel_nsti)
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id.vars=c(sample_ids))
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti <- as.data.frame(merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti <- melt(rel_nsti, by=rel_nsti$Row.names, id.vars=c(sample_ids))
View(rel_nsti)
rel_nsti <- melt(rel_nsti, by=Row.names, id.vars=c(sample_ids))
rel_nsti <- as.data.frame(merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti <- melt(rel_nsti, by=Row.names, id.vars=c(sample_ids))
rel_nsti <- as.data.frame(merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti <- melt(rel_nsti, id.vars=c(sample_ids))
rel_nsti <- as.data.frame(merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti <- pivot_longer(rel_nsti, id.vars=c(sample_ids))
rel_nsti <- pivot_longer(data = rel_nsti, cols = sample_ids)
rel_nsti <- (merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
sample_ids <- c(as.character(sample_metadata$Sample.id))
rel_nsti <- pivot_longer(data = rel_nsti, cols = sample_ids)
rel_nsti <- melt(rel_nsti, id.vars = sample_ids)
sample_ids <- c(as.character(sample_metadata$Sample.id))
rel_nsti <- (merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti <- melt(rel_nsti, id.vars = sample_ids)
rel_nsti <- (merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti <- melt(rel_nsti, id.vars = sample_ids)
sample_ids <- c(as.character(sample_metadata$Sample.id))
rel_nsti_long <- gather(rel_nsti, key = sample_ids)
View(rel_nsti_long)
rel_nsti <- (merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti_long <- gather(rel_nsti, key = rel_nsti$Row.names)
rel_nsti <- (merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti_long <- gather(rel_nsti, key = rel_nsti$Row.names)
rel_nsti <- (merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE))
rel_nsti_long <- gather(rel_nsti, key = rel_nsti$Row.names, value = sample_ids)
library(reshape2)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti_long <- melt(rel_nsti, id.vars = Row.names, measure.vars = sample_ids)
rel_nsti_long <- melt(rel_nsti, id.vars = rel_nsti$Row.names, measure.vars = sample_ids)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti_long <- melt(rel_nsti, id.vars = rel_nsti$Row.names, measure.vars = sample_ids)
rel_nsti_long <- melt(rel_nsti, id.vars = sample_ids, measure.vars = sample_ids)
View(rel_nsti_long)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti_long <- melt(rel_nsti, id.vars = "Row.names", measure.vars = sample_ids)
View(rel_nsti_long)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
View(rel_nsti)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
View(rel_nsti_long)
View(rel_nsti)
rel_nsti_long <- melt(rel_nsti, id.vars = c('Row.names', 'metadata-NSTI', measure.vars = sample_ids)
#Group accding to consortia
plot(x, y,
rel_nsti_long <- melt(rel_nsti, id.vars = c('Row.names', 'metadata-NSTI'), measure.vars = sample_ids)
rel_nsti_long <- melt(rel_nsti, id.vars = c(rel_nsti$Row.names, rel_nsti$metadata-NSTI), measure.vars = sample_ids)
rel_nsti_long <- melt(rel_nsti, id.vars = c(rel_nsti$Row.names, rel_nsti$'metadata-NSTI'), measure.vars = sample_ids)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti_long <- melt(rel_nsti, id.vars = c(rel_nsti$Row.names, rel_nsti$'metadata-NSTI'), measure.vars = sample_ids)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti_long <- melt(rel_nsti, id.vars = c(rel_nsti$Row.names, rel_nsti$`metadata-NSTI`), measure.vars = sample_ids)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti_long <- melt(rel_nsti, id.vars = c(Row.names, `metadata-NSTI`), measure.vars = sample_ids)
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti_long <- melt(rel_nsti, measure.vars = sample_ids)
View(rel_nsti_long)
rel_nsti_long <- melt(rel_nsti, measure.vars = sample_ids, variable.name = 'sample.id')
rel_nsti <- melt(rel_nsti, measure.vars = sample_ids, variable.name = 'sample.id')
plot(rel_nsti$metadata_NSTI, rel_nsti$value,
pch = 19,
col = factor(rel_nsti_long$sample.id))
rel_nsti <- melt(rel_nsti, measure.vars = sample_ids, variable.name = 'sample.id', value.name = 'rel.abundance')
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
rel_nsti <- melt(rel_nsti, measure.vars = sample_ids, variable.name = 'sample.id', value.name = 'rel.abundance')
plot(rel_nsti$metadata_NSTI, rel_nsti$rel.abundance,
pch = 19,
col = factor(rel_nsti_long$sample.id))
legend("topleft",
legend = levels(factor(sample_metadata$Sample.id)),
pch = 19,
col = factor(factor(sample_metadata$Sample.id)))
legend("topleft",
legend = levels(factor(rel_nsti_long$sample.id)),
pch = 19,
col = factor(factor(rel_nsti_long$sample.id)))
legend("topleft",
legend = levels(factor(rel_nsti_long$sample.id)),
pch = 19,
col = factor(factor(rel_nsti_long$sample.id)))
plot(rel_nsti$metadata_NSTI, rel_nsti$rel.abundance,
pch = 19,
col = factor(rel_nsti_long$sample.id))
legend("topleft",
legend = levels(factor(rel_nsti_long$sample.id)),
pch = 19,
col = factor(factor(rel_nsti_long$sample.id)))
plot.new
nsti_rel_plot <- plot(rel_nsti$metadata_NSTI, rel_nsti$rel.abundance,
pch = 19,
col = factor(rel_nsti_long$sample.id))
legend("topleft",
legend = levels(factor(rel_nsti_long$sample.id)),
pch = 19,
col = factor(factor(rel_nsti_long$sample.id)))
install.packages("heatmaply")
nsti_rel_plot <- plot(rel_nsti$metadata_NSTI, rel_nsti$rel.abundance,
pch = 19,
col = factor(rel_nsti_long$sample.id))
nsti_rel_plot <- ggplot(rel_nsti$metadata_NSTI, rel_nsti$rel.abundance,
pch = 19,
col = factor(rel_nsti_long$sample.id))
nsti_rel_plot <- ggplot(aes(x=rel_nsti$metadata_NSTI, y= rel_nsti$rel.abundance)),
nsti_rel_plot <- ggplot(aes(x=rel_nsti$metadata_NSTI, y= rel_nsti$rel.abundance)
pch = 19,
nsti_rel_plot <- plot(rel_nsti$metadata_NSTI, rel_nsti$rel.abundance,
pch = 19,
col = factor(rel_nsti_long$sample.id))
ggplot_rel_plot <- ggplot(data=rel_nsti, aes(x='metadata_NSTI', y='rel_abundance'))
plot(ggplot_rel_plot)
ggplot_rel_plot <- ggplot(data=rel_nsti, aes(x=metadata_NSTI, y=rel_abundance))
plot(ggplot_rel_plot)
ggplot_rel_plot <- ggplot(data=rel_nsti, aes(x=metadata_NSTI, y=rel.abundance))
plot(ggplot_rel_plot)
ggplot_rel_plot <- ggplot(data=rel_nsti, aes(x=metadata_NSTI, y=rel.abundance)) + geom_point()
plot(ggplot_rel_plot)
ggplot_rel_plot <- ggplot(data=rel_nsti, aes(x=metadata_NSTI, y=rel.abundance)) + geom_point(color = factor(sample.id))
ggplot_rel_plot <- ggplot(data=rel_nsti, aes(x=metadata_NSTI, y=rel.abundance)) + geom_point(color = factor(rel_nsti$sample.id))
plot(ggplot_rel_plot)
ggplot_rel_plot <- ggplot(data=rel_nsti, aes(x=metadata_NSTI, y=rel.abundance)) + geom_point(color = factor(rel_nsti$sample.id))
ggplot_rel_plot <- ggplot(data=rel_nsti, aes(x=metadata_NSTI, y=rel.abundance)) + geom_point(color = vars(rel_nsti$sample.id))
plot(ggplot_rel_plot)
ggplot_rel_plot <- ggplot(data=rel_nsti,mapping= aes(x=metadata_NSTI, y=rel.abundance, color=sample.id)) + geom_point()
plot(ggplot_rel_plot)
vignette(heatmap)
library(heatmaply)
vignette heatmap
vignette(heatmap)
vignette('heatmap')
vignette('heatmaply')
BiocManager::install('KEGGREST')
browseVignettes("KEGGREST")
library(KEGGREST)
#retrieve BRITE hierarchy from KEGG using KEGGREST
listDatabases()
help('KEGGREST')
help(heatmaply)
library(heatmaply)
help("heatmaply")
heatmaply(percentize(unstr_keg_mat), Rowv=NA, Colv=NA
width=2000, height=2000)
heatmaply(percentize(unstr_keg_mat), Rowv=NA, Colv=NA,
width=2000, height=2000)
#Generate Heatplot from unstratified KEGG plots
#First convert the unstratified output to its long format
row.names(unstrat_kegg) <- unstrat_kegg$description
unstrat_kegg <- unstrat_kegg[,3:ncol(unstrat_kegg)]
unstr_keg_mat <- data.matrix(unstrat_kegg,rownames.force = TRUE)
heatmaply(percentize(unstr_keg_mat), Rowv=NA, Colv=NA,
width=2000, height=2000)
heatmaply(percentize(unstr_keg_mat), Rowv=NA, Colv=NA,
width=2000, height=2000, scale="row")
heatmaply(percentize(unstr_keg_mat), Rowv=NA, Colv=NA,
width=2000, height=2000, scale="column")
#Generate Heatplot from unstratified KEGG plots
#First convert the unstratified output to its long format
row.names(unstrat_kegg) <- unstrat_kegg$description
unstrat_kegg <- unstrat_kegg[,3:ncol(unstrat_kegg)]
unstr_keg_mat <- data.matrix(unstrat_kegg,rownames.force = TRUE)
heatmaply(percentize(unstr_keg_mat), Rowv=NA, Colv=NA,
width=2000, height=2000, scale="column")
#Generate Heatplot from unstratified KEGG plots
#First convert the unstratified output to its long format
row.names(unstrat_kegg) <- unstrat_kegg$description
unstrat_kegg <- unstrat_kegg[,3:ncol(unstrat_kegg)]
#This code block is to stage all the files needed for visualization
#Stage taxonomy file using Qiime2R
taxa_vsearch <- parse_taxonomy(taxonomy = read_qza('../taxonomy_vsearch/classification.qza')$data)
#This code block is to stage all the files needed for visualization
#Stage taxonomy file using Qiime2R
taxa_vsearch <- parse_taxonomy(taxonomy = read_qza('../taxonomy_vsearch/classification.qza')$data)
library(qiime2R)
library(tidyr)
library(microbiome)
library(compositions)
library(Dict)
library(reshape2)
library(heatmaply)
library(KEGGREST)
library(RColorBrewer)
#This code block is to stage all the files needed for visualization
#Stage taxonomy file using Qiime2R
taxa_vsearch <- parse_taxonomy(taxonomy = read_qza('../taxonomy_vsearch/classification.qza')$data)
taxa_blast <- parse_taxonomy(taxonomy = read_qza('../taxonomy_blast/classification-blast.qza')$data)
#Stage metadata file
sample_metadata <- read.csv('../read-files/metadata.tsv', sep='\t')
#Stage unstratified/strat kegg pathway files
unstrat_kegg <- read.csv('../picrust2-strat/out/KEGG_pathways_out/path_abun_unstrat.tsv', sep = '\t')
strat_kegg <- read.csv('../picrust2-strat/out/KEGG_pathways_out/path_abun_strat.tsv', sep = '\t')
#Stage unstrat/strat KEGG ortholog files
ko_unstrat <- read.csv('../picrust2-strat/out/KO_metagenome_out/unstrat_ko_metagenome.tsv', sep = '\t')
ko_strat <- read.csv('../picrust2-strat/out/KO_metagenome_out/strat_ko_metagenome.tsv', sep = '\t')
#Open selected KOs (for plotting relevant Kegg pathways)
deg_kos <- read.csv('./select_kos.txt', sep = '\t', header = TRUE)
rownames(deg_kos) <- deg_kos[,1]
deg_kos[,1] <- NULL
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
#Filter to only Select KOs
pth_2_ko <- pth_2_ko[pth_2_ko$V1 %in% rownames(deg_kos),]
#Retrieve Sample ids so I can call it as a variable
sample_ids <- c(as.character(sample_metadata$Sample.id))
#retrieve BRITE hierarchy from KEGG using KEGGREST
keggGet(dbentries = 'br08901')
unstr_keg_mat <- data.matrix(unstrat_kegg_no_desc,rownames.force = TRUE)
#Generate Heatplot from unstratified KEGG plots
#First convert the unstratified output to its long format
row.names(unstrat_kegg) <- unstrat_kegg$description
unstrat_kegg_no_desc <- unstrat_kegg[,3:ncol(unstrat_kegg)]
unstr_keg_mat <- data.matrix(unstrat_kegg_no_desc,rownames.force = TRUE)
heatmaply(percentize(unstr_keg_mat), Rowv=NA, Colv=NA,
width=2000, height=3000, scale="column")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
