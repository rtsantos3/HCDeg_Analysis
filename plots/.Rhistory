col = heat_palette,
cexRow = 0.7,
RowSideColors=c16[as.numeric(deg_df$pathway_desc)], na.color = 'black' )
legend("left",
legend = unique(deg_df$pathway_desc),
col = c16[unique(deg_df$pathway_desc)],
inset = c(-0.09,0),
lty= 1,
lwd = 5,
pch =14,
cex=.45,
xpd=T
)
dev.off()
#Generate Cumulative relative abundances per consortia for specific degradation pathways
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))
#Convert to percent
filt_rel_abun$rel.abundance <- filt_rel_abun$rel.abundance*100
write.table(filt_rel_abun, file =  './intermediate_files/out-Deg-pathway-relabunds.tsv', sep ='\t', col.names = T)
colors <- brewer.pal(12, "Paired")
pdf(file='./out/Deg-pathway-relabunds.pdf', width = 8, height = 5)
plot3 <- ggplot(filt_rel_abun, aes(x=sample.id, y=rel.abundance, fill=description)) +   geom_bar(position="stack", stat="identity") +
labs(title='Degradation pathway relative abundances', y='% relative pathway abundances') +scale_fill_manual(values=colors)
plot(plot3)
dev.off()
plot(plot3)
#Generate Cumulative relative abundances per consortia for specific degradation pathways
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))
#Convert to percent
filt_rel_abun$rel.abundance <- filt_rel_abun$rel.abundance*100
write.table(filt_rel_abun, file =  './intermediate_files/out-Deg-pathway-relabunds.tsv', sep ='\t', col.names = T)
colors <- brewer.pal(12, "Paired")
pdf(file='./out/Deg-pathway-relabunds.pdf', width = 8, height = 5)
plot3 <- ggplot(filt_rel_abun, aes(x=cons_codes[sample.id], y=rel.abundance, fill=description)) +   geom_bar(position="stack", stat="identity") +
labs(title='Degradation pathway relative abundances', y='% relative pathway abundances') +scale_fill_manual(values=colors)
plot(plot3)
dev.off()
plot(plot3)
#Generate Cumulative relative abundances per consortia for specific degradation pathways
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))
#Convert to percent
filt_rel_abun$rel.abundance <- filt_rel_abun$rel.abundance*100
# Rename values in sample.id using the cons_code vector
filt_rel_abun$sample.id <- recode(filt_rel_abun$sample.id, !!!cons_code)
# Rename values in sample.id using the cons_code vector
filt_rel_abun$sample.id <- recode(filt_rel_abun$sample.id, !!!cons_codes)
View(filt_rel_abun)
# Rename values in sample.id using the cons_code vector
filt_rel_abun$sample.id <- recode(filt_rel_abun$sample.id, !!!cons_codes)
cons_codes
#This code block is to load the required files to plot NSTI vs relative abundance
abs_count_otu <-  read_qza(file = '../dada2/table.qza')$data
rel_count_otu <- as.data.frame(apply(abs_count_otu,2,function(x){x/sum(x)}))
nsti_asvs <- as.data.frame(read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='\t', row.names = 1))
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
samps <- c('HC-DS','HC-XY','HC-HX','HC-HD')
cons_codes <- c('B2'='HC-DS',
'B7'='HC-XY',
'B1'='HC-HX',
'A5'='HC-HD')
rel_nsti <- melt(rel_nsti, measure.vars = samps, variable.name = 'sample.id', value.name = 'rel.abundance')
#Group accding to consortia
ggplot_rel_plot <- ggplot(data=rel_nsti,mapping= aes(x=metadata_NSTI, y=rel.abundance, color=sample.id)) + geom_point()
plot(ggplot_rel_plot)
#No need to present this. This is just a diagnostic plot
#Generate Cumulative relative abundances per consortia for specific degradation pathways
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))
#Convert to percent
filt_rel_abun$rel.abundance <- filt_rel_abun$rel.abundance*100
# Rename values in sample.id using the cons_code vector
filt_rel_abun$sample.id <- recode(filt_rel_abun$sample.id, !!!cons_codes)
write.table(filt_rel_abun, file =  './intermediate_files/out-Deg-pathway-relabunds.tsv', sep ='\t', col.names = T)
colors <- brewer.pal(12, "Paired")
pdf(file='./out/Deg-pathway-relabunds.pdf', width = 8, height = 5)
plot3 <- ggplot(filt_rel_abun, aes(x=sample.id, y=rel.abundance, fill=description)) +   geom_bar(position="stack", stat="identity") +
labs(title='Degradation pathway relative abundances', y='% relative pathway abundances') +scale_fill_manual(values=colors)
plot(plot3)
dev.off()
plot(plot3)
.
#This code block is to load the required files to plot NSTI vs relative abundance
abs_count_otu <-  read_qza(file = '../dada2/table.qza')$data
rel_count_otu <- as.data.frame(apply(abs_count_otu,2,function(x){x/sum(x)}))
nsti_asvs <- as.data.frame(read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='\t', row.names = 1))
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
samps <- c('HC-DS','HC-XY','HC-HX','HC-HD')
cons_codes <- c('B2'='HC.DS',
'B7'='HC.XY',
'B1'='HC.HX',
'A5'='HC.HD')
rel_nsti <- melt(rel_nsti, measure.vars = samps, variable.name = 'sample.id', value.name = 'rel.abundance')
ggplot_rel_plot <- ggplot(data=rel_nsti,mapping= aes(x=metadata_NSTI, y=rel.abundance, color=sample.id)) + geom_point()
plot(ggplot_rel_plot)
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor)) %>% mutate(sample.id = recode(sample.id, !!!cons_codes))
View(filt_rel_abun)
#This code block is to load the required files to plot NSTI vs relative abundance
abs_count_otu <-  read_qza(file = '../dada2/table.qza')$data
rel_count_otu <- as.data.frame(apply(abs_count_otu,2,function(x){x/sum(x)}))
nsti_asvs <- as.data.frame(read.csv('../picrust2-strat/out/marker_predicted_and_nsti.tsv.gz', sep='\t', row.names = 1))
rel_nsti <- merge(nsti_asvs,rel_count_otu,by="row.names",all.x=TRUE)
samps <- c('HC-DS','HC-XY','HC-HX','HC-HD')
cons_codes <- c('HC.DS'='B2',
'HC.XY'='B7',
'HC.HX'='B1',
'HC.HD'='A5')
rel_nsti <- melt(rel_nsti, measure.vars = samps, variable.name = 'sample.id', value.name = 'rel.abundance')
#Group accding to consortia
ggplot_rel_plot <- ggplot(data=rel_nsti,mapping= aes(x=metadata_NSTI, y=rel.abundance, color=sample.id)) + geom_point()
plot(ggplot_rel_plot)
#No need to present this. This is just a diagnostic plot
#Generate Cumulative relative abundances per consortia for specific degradation pathways
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor)) %>% mutate(sample.id = recode(sample.id, !!!cons_codes))
#Convert to percent
filt_rel_abun$rel.abundance <- filt_rel_abun$rel.abundance*100
# Rename values in sample.id using the cons_code vector
filt_rel_abun$sample.id <- recode(filt_rel_abun$sample.id, !!!cons_codes)
write.table(filt_rel_abun, file =  './intermediate_files/out-Deg-pathway-relabunds.tsv', sep ='\t', col.names = T)
colors <- brewer.pal(12, "Paired")
pdf(file='./out/Deg-pathway-relabunds.pdf', width = 8, height = 5)
plot3 <- ggplot(filt_rel_abun, aes(x=sample.id, y=rel.abundance, fill=description)) +   geom_bar(position="stack", stat="identity") +
labs(title='Degradation pathway relative abundances', y='% relative pathway abundances') +scale_fill_manual(values=colors)
plot(plot3)
dev.off()
plot(plot3)
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))   mutate(sample.id = recode(sample.id, !!!cons_code)) %>%
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))   mutate(sample.id = recode(sample.id,!!!cons_code)) %>%
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_code)) %>%
mutate(rel.abundance = rel.abundance * 100) %>%
arrange(sample.id)
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>%
mutate(rel.abundance = rel.abundance * 100) %>%
arrange(sample.id)
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>%
mutate(rel.abundance = rel.abundance * 100) %>%
arrange(sample.id)
View(filt_rel_abun)
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>%
mutate(rel.abundance = rel.abundance * 100) %>%
arrange(sample.id)
View(filt_rel_abun)
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>%
mutate(rel.abundance = rel.abundance * 100) %>% #Convert to percent
group_by(sample.id)%>%arrange(sample.id)  #Sort the values based on sammple.id
View(filt_rel_abun)
#Generate Cumulative relative abundances per consortia for specific degradation pathways
sort_cols = c('A5', 'B1', 'B5', 'B7')
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols)) %>%
mutate(rel.abundance = rel.abundance * 100) %>% #Convert to percent
#Convert to percent
write.table(filt_rel_abun, file =  './intermediate_files/out-Deg-pathway-relabunds.tsv', sep ='\t', col.names = T)
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols)) %>%
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
View(filt_rel_abun)
cons_codes
#Generate sorting vector for the sample ids
sort_cols = c('A5', 'B2', 'B5', 'B7')
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols)) %>%
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
View(filt_rel_abun)
#Generate sorting vector for the sample ids
sort_cols = c('A5', 'B1', 'B2', 'B7')
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols)) %>%
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
View(filt_rel_abun)
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols)) %>%
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
View(filt_rel_abun)
#Generate sorting vector for the sample ids
sort_cols = c('A5', 'B1', 'B2', 'B7')
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols)) %>%
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
write.table(filt_rel_abun, file =  './intermediate_files/out-Deg-pathway-relabunds.tsv', sep ='\t', col.names = T)
colors <- brewer.pal(12, "Paired")
pdf(file='./out/Deg-pathway-relabunds.pdf', width = 8, height = 5)
plot3 <- ggplot(filt_rel_abun, aes(x=sample.id, y=rel.abundance, fill=description)) +   geom_bar(position="stack", stat="identity") +
labs(title='Degradation pathway relative abundances', y='% relative pathway abundances') +scale_fill_manual(values=colors)
plot(plot3)
dev.off()
#This code block is to summarize how many Kegg orthologs are identified for this study. This is based on the database used by PICRUST2  which may have been curated to remove double entries.
ko_counts <- group_by(deg_df, pathway_desc)
ko_counts %>% count(pathway_desc)
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc) #Summarise based on taxon_rel
kegg_strat_relcounts$taxon <- factor(kegg_strat_relcounts$taxon)
write.table(kegg_strat_relcounts, file =  './intermediate_files/selected_relative_abundance_KEGG_pathways (stratified).tsv', sep ='\t', col.names = T)
kegg_strat_relcounts
fam_list <- c(unique(kegg_strat_relcounts$taxon))
fam_cols  <- distinctColorPalette(20)
pdf(file = "./out/Per-Family-KEGG-Relcounts.pdf",
width = 12,
height = 5)
#This function plots all the stratified abundances in a single row
plot4<- ggplot(kegg_strat_relcounts, aes(x=description, y=taxon_rel_function_abun, fill = taxon)) +
geom_bar(position="stack", stat="identity")  +
scale_fill_manual(values=fam_cols, drop=T) +
labs(y= "Function relative abundance (Per taxon)", x="HC Degradation Pathways (Level 3 KEGG)")+ coord_flip() + facet_wrap(~sample, nrow = 1)
plot(plot4)
dev.off()
View(kegg_strat_relcounts)
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample.id, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc) %>% mutate(sample=recode(sample, !!!cons_codes) %>%  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols))
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample.id, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc)%>%
mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols))
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc)%>%
mutate(sample.id = recode(sample,!!!cons_codes)) %>% mutate(sample.id=factor(sample, levels=sort_cols))
kegg_strat_relcounts$description <- factor(kegg_strat_relcounts$description)
kegg_strat_relcounts$taxon <- factor(kegg_strat_relcounts$taxon)
write.table(kegg_strat_relcounts, file =  './intermediate_files/selected_relative_abundance_KEGG_pathways (stratified).tsv', sep ='\t', col.names = T)
kegg_strat_relcounts
#Lastly, this code block is to summarize each of the KOs on a per taxa basis. We'll be using the stratified code block here. The methodology is based on Boto et al (2019) where the absolute counts of each taxa (taxon_function_abun) were summarized. For simplicity's  sake we will be aggregating each per family (as determined by the classification method (Vsearch) used to type the ASVs using Qiime2)
#
# Bôto, M. L., Magalhães, C., Perdigão, R., Alexandrino, D. A., Fernandes, J. P., Bernabeu, A. M., ... & Mucha, A. P. (2021). Harnessing the potential of native microbial communities for bioremediation of oil spills in the Iberian Peninsula NW coast. Frontiers in microbiology, 12, 879.
cons_codes <- c('HC-DS'='B2',
'HC-XY'='B7',
'HC-HX'='B1',
'HC-HD'='A5')
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc)%>%
mutate(sample.id = recode(sample,!!!cons_codes)) %>% mutate(sample.id=factor(sample, levels=sort_cols))
kegg_strat_relcounts$description <- factor(kegg_strat_relcounts$description)
kegg_strat_relcounts$taxon <- factor(kegg_strat_relcounts$taxon)
#Finally, aggregate any families
write.table(kegg_strat_relcounts, file =  './intermediate_files/selected_relative_abundance_KEGG_pathways (stratified).tsv', sep ='\t', col.names = T)
kegg_strat_relcounts
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc)%>%
mutate(sample.id = recode(sample,!!!cons_codes)) %>% mutate(sample.id=factor(sample, levels=sort_cols))
kegg_strat_relcounts$description <- factor(kegg_strat_relcounts$description)
kegg_strat_relcounts$taxon <- factor(kegg_strat_relcounts$taxon)
write.table(kegg_strat_relcounts, file =  './intermediate_files/selected_relative_abundance_KEGG_pathways (stratified).tsv', sep ='\t', col.names = T)
kegg_strat_relcounts
#
# Bôto, M. L., Magalhães, C., Perdigão, R., Alexandrino, D. A., Fernandes, J. P., Bernabeu, A. M., ... & Mucha, A. P. (2021). Harnessing the potential of native microbial communities for bioremediation of oil spills in the Iberian Peninsula NW coast. Frontiers in microbiology, 12, 879.
cons_codes <- c('HC-DS'='B2',
'HC-XY'='B7',
'HC-HX'='B1',
'HC-HD'='A5')
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc)%>%
mutate(sample.id = recode(sample,!!!cons_codes)) %>% mutate(sample.id=factor(sample, levels=sort_cols))
kegg_strat_relcounts
#
# Bôto, M. L., Magalhães, C., Perdigão, R., Alexandrino, D. A., Fernandes, J. P., Bernabeu, A. M., ... & Mucha, A. P. (2021). Harnessing the potential of native microbial communities for bioremediation of oil spills in the Iberian Peninsula NW coast. Frontiers in microbiology, 12, 879.
cons_codes <- c('HC-DS'='B2',
'HC-XY'='B7',
'HC-HX'='B1',
'HC-HD'='A5')
kegg_strat_relcounts$description <- factor(kegg_strat_relcounts$description)
kegg_strat_relcounts$taxon <- factor(kegg_strat_relcounts$taxon)
write.table(kegg_strat_relcounts, file =  './intermediate_files/selected_relative_abundance_KEGG_pathways (stratified).tsv', sep ='\t', col.names = T)
kegg_strat_relcounts
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc)%>%
mutate(sample = recode(sample,!!!cons_codes)) %>% mutate(sample=factor(sample, levels=sort_cols))
kegg_strat_relcounts$description <- factor(kegg_strat_relcounts$description)
kegg_strat_relcounts$taxon <- factor(kegg_strat_relcounts$taxon)
write.table(kegg_strat_relcounts, file =  './intermediate_files/selected_relative_abundance_KEGG_pathways (stratified).tsv', sep ='\t', col.names = T)
kegg_strat_relcounts
fam_list <- c(unique(kegg_strat_relcounts$taxon))
fam_cols  <- distinctColorPalette(20)
pdf(file = "./out/Per-Family-KEGG-Relcounts.pdf",
width = 12,
height = 5)
plot(plot4)
dev.off()
#Lastly, this code block is to summarize each of the KOs on a per taxa basis. We'll be using the stratified code block here. The methodology is based on Boto et al (2019) where the absolute counts of each taxa (taxon_function_abun) were summarized. For simplicity's  sake we will be aggregating each per family (as determined by the classification method (Vsearch) used to type the ASVs using Qiime2)
#
# Bôto, M. L., Magalhães, C., Perdigão, R., Alexandrino, D. A., Fernandes, J. P., Bernabeu, A. M., ... & Mucha, A. P. (2021). Harnessing the potential of native microbial communities for bioremediation of oil spills in the Iberian Peninsula NW coast. Frontiers in microbiology, 12, 879.
cons_codes <- c('HC-DS'='B2',
'HC-XY'='B7',
'HC-HX'='B1',
'HC-HD'='A5')
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc)%>%
mutate(sample = recode(sample,!!!cons_codes)) %>% mutate(sample=factor(sample, levels=sort_cols))
kegg_strat_relcounts$description <- factor(kegg_strat_relcounts$description)
kegg_strat_relcounts$taxon <- factor(kegg_strat_relcounts$taxon)
#Finally, aggregate any families
write.table(kegg_strat_relcounts, file =  './intermediate_files/selected_relative_abundance_KEGG_pathways (stratified).tsv', sep ='\t', col.names = T)
#This code block is to visualize the generated filtered table above
fam_list <- c(unique(kegg_strat_relcounts$taxon))
fam_cols  <- distinctColorPalette(20)
pdf(file = "./out/Per-Family-KEGG-Relcounts.pdf",
width = 12,
height = 5)
#This function plots all the stratified abundances in a single row
plot4<- ggplot(kegg_strat_relcounts, aes(x=description, y=taxon_rel_function_abun, fill = taxon)) +
geom_bar(position="stack", stat="identity")  +
scale_fill_manual(values=fam_cols, drop=T) +
labs(y= "Function relative abundance (Per taxon)", x="HC Degradation Pathways (Level 3 KEGG)")+ coord_flip() + facet_wrap(~sample, nrow = 1)
plot(plot4)
dev.off()
plot(plot4)
#This code block is to visualize the generated filtered table above
fam_list <- c(unique(kegg_strat_relcounts$taxon))
fam_cols  <- distinctColorPalette(20)
pdf(file = "./out/Per-Family-KEGG-Relcounts.pdf",
width = 12,
height = 5)
#This function plots all the stratified abundances in a single row
plot4<- ggplot(kegg_strat_relcounts, aes(x=description, y=taxon_rel_function_abun, fill = taxon)) +
geom_bar(position="stack", stat="identity")  +
scale_fill_manual(values=fam_cols, drop=T) +
labs(y= "Function relative abundance (Per taxon)", x="HC Degradation Pathways (Level 3 KEGG)")+ coord_flip() + facet_wrap(~sample, nrow = 1)
plot(plot4)
dev.off()
plot(plot4)
#This code block is to visualize the generated filtered table above
fam_list <- c(unique(kegg_strat_relcounts$taxon))
fam_cols  <- distinctColorPalette(20)
pdf(file = "./out/Per-Family-KEGG-Relcounts.pdf",
width = 12,
height = 5)
#This function plots all the stratified abundances in a single row
plot4<- ggplot(kegg_strat_relcounts, aes(x=description, y=taxon_rel_function_abun, fill = taxon)) +
geom_bar(position="stack", stat="identity")  +
scale_fill_manual(values=fam_cols, drop=T) +
labs(y= "Function relative abundance (Per taxon)", x="HC Degradation Pathways (Level 3 KEGG)")+ coord_flip() + facet_wrap(~sample, nrow = 1)
plot(plot4)
dev.off()
plot(plot4)
kegg_strat_relcounts_order <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Order'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc) #Summarise based on taxon_rel
fam_cols  <- distinctColorPalette(20)
pdf(file = "./out/Per-order-relcounts-KEGG.pdf",
width = 14,
height = 7)
plot5<- ggplot(kegg_strat_relcounts_order, aes(x=description, y=taxon_rel_function_abun, fill = taxon)) +
geom_bar(position="stack", stat="identity")  +
scale_fill_manual(values=fam_cols, drop=T) +
labs(y= "Function relative abundance (Per taxon)", x="HC Degradation Pathways (Level 3 KEGG)")+ coord_flip() + facet_wrap(~sample, nrow = 1)
plot(plot5)
dev.off()
plot(plot5)
fam_cols  <- distinctColorPalette(20)
kegg_strat_relcounts_phylum <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Phylum'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc) #Summarise based on taxon_rel
pdf(file = "./out/Per-phylum-relcounts-KEGG.pdf",
width = 14,
height = 7)
plot6<- ggplot(kegg_strat_relcounts_phylum, aes(x=description, y=taxon_rel_function_abun, fill = taxon)) +
geom_bar(position="stack", stat="identity")  +
scale_fill_manual(values=fam_cols, drop=T) +
labs(y= "Function relative abundance (Per taxon)", x="HC Degradation Pathways (Level 3 KEGG)")+ coord_flip() + facet_wrap(~sample, nrow = 1)
plot(plot6)
dev.off()
plot(plot6)
View(kegg_strat_relcounts_class)
View(kegg_strat_relcounts_genus)
#Lastly, this code block is to summarize each of the KOs on a per taxa basis. We'll be using the stratified code block here. The methodology is based on Boto et al (2019) where the absolute counts of each taxa (taxon_function_abun) were summarized. For simplicity's  sake we will be aggregating each per family (as determined by the classification method (Vsearch) used to type the ASVs using Qiime2)
#
# Bôto, M. L., Magalhães, C., Perdigão, R., Alexandrino, D. A., Fernandes, J. P., Bernabeu, A. M., ... & Mucha, A. P. (2021). Harnessing the potential of native microbial communities for bioremediation of oil spills in the Iberian Peninsula NW coast. Frontiers in microbiology, 12, 879.
cons_codes <- c('HC-DS'='B2',
'HC-XY'='B7',
'HC-HX'='B1',
'HC-HD'='A5')
#Change taxon ids to family
kegg_strat_relcounts <- strat_kegg %>% transmute(description = as.factor(description), sample, taxon = taxa_vsearch[taxon, 'Family'], taxon_rel_function_abun) %>% group_by(sample, description,taxon) %>% summarise(across(taxon_rel_function_abun, sum)) %>% filter(description %in% deg_df$pathway_desc)%>%
mutate(sample = recode(sample,!!!cons_codes)) %>% mutate(sample=factor(sample, levels=sort_cols))
kegg_strat_relcounts$description <- factor(kegg_strat_relcounts$description)
kegg_strat_relcounts$taxon <- factor(kegg_strat_relcounts$taxon)
#Finally, aggregate any families
write.table(kegg_strat_relcounts, file =  './intermediate_files/selected_relative_abundance_KEGG_pathways (stratified).tsv', sep ='\t', col.names = T)
View(kegg_strat_relcounts_unfiltered_fam)
View(kegg_strat_relcounts_phylum)
View(kegg_strat_relcounts_genus)
View(kegg_strat_relcounts_class)
View(kegg_strat_relcounts)
#Generate sorting vector for the sample ids
sort_cols = c('A5', 'B1', 'B2', 'B7')
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols))
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols))
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
write.table(filt_rel_abun, file =  './intermediate_files/out-Deg-pathway-relabunds.tsv', sep ='\t', col.names = T)
colors <- brewer.pal(12, "Paired")
pdf(file='./out/Deg-pathway-relabunds.pdf', width = 8, height = 5)
plot3 <- ggplot(filt_rel_abun, aes(x=sample.id, y=rel.abundance, fill=description)) +   geom_bar(position="stack", stat="identity") +
labs(title='Degradation pathway relative abundances', y='% relative pathway abundances') +scale_fill_manual(values=colors)
plot(plot3)
#Generate Cumulative relative abundances per consortia for specific degradation pathways
#Generate sorting vector for the sample ids
sort_cols = c('A5', 'B1', 'B2', 'B7')
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols))
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
#Generate Cumulative relative abundances per consortia for specific degradation pathways
#Generate sorting vector for the sample ids
sort_cols = c('A5', 'B1', 'B2', 'B7')
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols))
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
#Filter then convert to long form so it's easier to plot
filt_rel_abun <- subset(rel_abun_unstrkeg, rownames(rel_abun_unstrkeg) %in% rownames(deg_kos)) %>% melt(measure.vars = sample_ids, variable.name = 'sample.id', value.name ='rel.abundance') %>% mutate(across(description, factor))  %>% mutate(sample.id = recode(sample.id,!!!cons_codes)) %>% mutate(sample.id=factor(sample.id, levels=sort_cols)) %>%
mutate(rel.abundance = rel.abundance * 100) #Convert to percent
write.table(filt_rel_abun, file =  './intermediate_files/out-Deg-pathway-relabunds.tsv', sep ='\t', col.names = T)
colors <- brewer.pal(12, "Paired")
pdf(file='./out/Deg-pathway-relabunds.pdf', width = 8, height = 5)
plot3 <- ggplot(filt_rel_abun, aes(x=sample.id, y=rel.abundance, fill=description)) +   geom_bar(position="stack", stat="identity") +
labs(title='Degradation pathway relative abundances', y='% relative pathway abundances') +scale_fill_manual(values=colors)
plot(plot3)
dev.off()
plot(plot3)
strat_kegg
otu_plots_fam <- ggarrange(abs_abund_plots_fam, rel_abund_plots_fam, ncol = 2, align ='h', common.legend = T, legend="right")
#Stage taxonomy file using Qiime2
taxa_vsearch <- parse_taxonomy(taxonomy = read_qza('../taxonomy_vsearch/classification.qza')$data)
# taxa_blast <- parse_taxonomy(taxonomy = read_qza('../taxonomy_blast/classification-blast.qza')$data)
#Stage metadata file
sample_metadata <- read.csv('../read-files/metadata.tsv', sep='\t')
#Stage unstratified/strat kegg pathway files
unstrat_kegg <- read.csv('../picrust2-strat/out/KEGG_pathways_out/path_abun_unstrat.tsv.gz', sep = '\t')
strat_kegg <- read.csv('../picrust2-strat/out/KEGG_pathways_out/path_abun_contrib.tsv.gz', sep = '\t')
#Stage unstrat/strat KEGG ortholog files
ko_unstrat <- read.csv('../picrust2-strat/out/KO_metagenome_out/pred_metagenome_unstrat.tsv.gz', sep = '\t')
ko_strat <- read.csv('../picrust2-strat/out/KO_metagenome_out/pred_metagenome_contrib.tsv.gz', sep = '\t')
#Open selected KOs (for plotting relevant Kegg pathways)
deg_kos <- read.csv('./select_kos.txt', sep = '\t', header = TRUE)
rownames(deg_kos) <- deg_kos[,1]
deg_kos[,1] <- NULL
#open the pathway to ko file
pth_2_ko <- read.csv('~/bioinfo_pipelines/picrust2-2.4.2/picrust2/default_files/pathway_mapfiles/KEGG_pathways_to_KO.tsv', header =FALSE, sep='\t')
#Convert empty strings as NA
pth_2_ko[pth_2_ko==""] <- NA
#Filter to only Select KOs
pth_2_ko <- pth_2_ko[pth_2_ko$V1 %in% rownames(deg_kos),]
rownames(pth_2_ko) <- pth_2_ko[,1]
pth_2_ko[,1] <- NULL
#Retrieve Sample ids so I can call it as a variable
sample_ids <- c('HC.DS','HC.XY','HC.HX','HC.HD')
#Rename the sample names to
#This code block is to load the required files to plot NSTI vs relative abundance
abs_count_otu_qza <-  '../dada2/filtered_table.qza'
taxa_vsearch_qza <- '../taxonomy_vsearch/classification.qza'
fam_cols <- c("#353A46", "#c7ac92", "#92dce5", "#a06b9a", "#94da1b", "#662e00", "#4a205a", "#008dd5", "#ecb309", "#ff5c6c", "#147b1e", "#341b74", "#f45d01", "#c11f96", "#848fa5", "#bf2231", "#fdfd9b", "#2bb6a8", "#af6e77", "#e08115")
#Try generating Phyloseq object
phyloseq_qza <- qza_to_phyloseq(features = abs_count_otu_qza, taxonomy = taxa_vsearch_qza, metadata = '../read-files/metadata.tsv')
colors <- fam_cols
phy_fam_abs <- phyloseq_qza %>% tax_glom(.,"Family") %>% aggregate_taxa(level = "Family")
abs_abund_plots_fam <- plot_composition(x = phy_fam_abs,otu.sort = 'abundance') +
scale_fill_manual(values = fam_cols) +  ylab('Absolute read counts')
phy_fam_rel <- phyloseq_qza %>% tax_glom(.,"Family") %>% aggregate_taxa(level = "Family")  %>% microbiome::transform(transform = 'compositional')
rel_abund_plots_fam <- plot_composition(x = phy_fam_rel,otu.sort = 'abundance') +
scale_fill_manual(values = fam_cols) +  ylab('Relative abundance')
phy_gen_abs <- phyloseq_qza %>% tax_glom(.,"Genus") %>% aggregate_taxa(level = "Genus")
abs_abund_plots_gen <- plot_composition(x = phy_gen_abs,otu.sort = 'abundance') +
scale_fill_manual(values = fam_cols) +  ylab('Absolute read counts')
phy_gen_rel <- phyloseq_qza %>% tax_glom(.,"Genus") %>% aggregate_taxa(level = "Genus")  %>% microbiome::transform(transform = 'compositional')
rel_abund_plots_gen <- plot_composition(x = phy_gen_rel,otu.sort = 'abundance') +
scale_fill_manual(values = fam_cols) + ylab('Relative abundance')
otu_plots_gen <- ggarrange(abs_abund_plots_gen, rel_abund_plots_gen, ncol = 2, align ='h', common.legend = T, legend="right")
install.packages("ggpubr")
install.packages("rstatix")
install.packages("car")
R.version
install.packages(c("DEoptimR", "gert", "Hmisc", "openssl"))
install.packages("ggpubr")
install.packages("nloptr", dependencies = TRUE)
install.packages("ggpubr")
install.packages("ggpubr",
repos = c("https://cran.rediris.org/", "https://cloud.r-project.org/"),
dependencies = TRUE)
install.packages("pbkrtest")
install.packages("ggpubr")
install.packages("dplyr")
install.packages("pbkrtest")
install.packages("ggpubr")
install.packages(packageurl, repos=NULL, type="source")
version
UpdateR
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
/
library('installr')
updateR()
install.packages("stringi")
updateR()
library(ggpubr)
install.packages("ggpubr")
remove.packages('car')
remove.packages('cars')
remove.packages('minga')
remove.packages('nloptr')
remove.packages('RcppEigen')
remove.packages('lme4')
remove.packages('SparseM')
remove.packages('MatrixModels')
remove.packages('quantreg')
install.packages('ggpubr')
install.packages('pbkrest')
